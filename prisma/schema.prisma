// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(CUSTOMER)
  
  // Subscription fields
  subscriptionType SubscriptionType @default(FREE_TRIAL)
  subscriptionStart DateTime?
  subscriptionEnd   DateTime?
  isActive         Boolean @default(true)
  trialUsed        Boolean @default(false)
  
  accounts Account[]
  sessions Session[]
  payments Payment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Article {
  id          String        @id @default(cuid())
  title       String
  content     String        @db.Text
  excerpt     String?
  slug        String        @unique
  status      ArticleStatus @default(DRAFT)
  publishedAt DateTime?
  
  // SEO fields
  metaTitle       String?
  metaDescription String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Edition {
  id          String   @id @default(cuid())
  title       String
  description String?
  publishDate DateTime
  isPublished Boolean  @default(false)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id                String        @id @default(cuid())
  userId            String
  xenditInvoiceId   String        @unique
  amount            Int           // Amount in cents
  currency          String        @default("IDR")
  status            PaymentStatus @default(PENDING)
  subscriptionType  SubscriptionType
  
  // Xendit specific fields
  externalId        String        @unique
  invoiceUrl        String?
  paymentMethod     String?
  paidAt            DateTime?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentStatus {
  PENDING
  PAID
  EXPIRED
  FAILED
}

enum UserRole {
  CUSTOMER
  EDITOR
  PUBLISHER
  ADMIN
}

enum SubscriptionType {
  FREE_TRIAL
  MONTHLY
  QUARTERLY
  HALF_YEARLY
  ANNUALLY
}

model SubscriptionPlan {
  id          String           @id @default(cuid())
  type        SubscriptionType @unique
  name        String
  price       Int              // in rupiah
  currency    String           @default("IDR")
  durationDays Int             // 30, 90, 180, 365
  features    Json
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
}

model Payment {
  id               String   @id @default(cuid())
  userId           String
  xenditInvoiceId  String   @unique
  amount           Int
  currency         String   @default("IDR")
  status           String   // "pending", "paid", "failed", "expired"
  subscriptionType SubscriptionType
  paymentMethod    String?
  externalId       String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id])
}

enum ArticleStatus {
  DRAFT
  UNDER_REVIEW
  APPROVED
  PUBLISHED
  REJECTED
}