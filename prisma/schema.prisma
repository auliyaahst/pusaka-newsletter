// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(CUSTOMER)
  
  // Subscription fields
  subscriptionType SubscriptionType @default(FREE_TRIAL)
  subscriptionStart DateTime?
  subscriptionEnd   DateTime?
  isActive         Boolean @default(true)
  trialUsed        Boolean @default(false)
  
  accounts Account[]
  sessions Session[]
  payments Payment[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Article {
  id          String        @id @default(cuid())
  title       String
  content     String        @db.Text // Rich text content (HTML or Markdown)
  contentType ContentType   @default(HTML) // HTML or MARKDOWN
  excerpt     String?       @db.Text // Can be longer for newsletter summaries
  slug        String        @unique
  status      ArticleStatus @default(DRAFT)
  publishedAt DateTime?
  
  // Newsletter specific fields
  order       Int?          // Order within edition for display
  featured    Boolean       @default(false) // Featured article flag
  readTime    Int?          // Estimated read time in minutes
  
  // SEO fields
  metaTitle       String?
  metaDescription String?
  
  // Edition relationship
  editionId   String?
  edition     Edition? @relation(fields: [editionId], references: [id], onDelete: SetNull)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Edition {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  publishDate DateTime
  isPublished Boolean  @default(false)
  
  // Newsletter specific fields
  editionNumber Int?    // Edition number (e.g., 1, 2, 3...)
  coverImage    String? // URL to cover image
  theme         String? // Theme or topic of the edition
  
  // Articles in this edition
  articles    Article[]
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payment {
  id                String        @id @default(cuid())
  userId            String
  xenditInvoiceId   String        @unique
  amount            Int           // Amount in cents
  currency          String        @default("IDR")
  status            PaymentStatus @default(PENDING)
  subscriptionType  SubscriptionType
  
  // Xendit specific fields
  externalId        String        @unique
  invoiceUrl        String?
  paymentMethod     String?
  paidAt            DateTime?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum PaymentStatus {
  PENDING
  PAID
  EXPIRED
  FAILED
}

enum UserRole {
  CUSTOMER
  EDITOR
  PUBLISHER
  ADMIN
}

enum SubscriptionType {
  FREE_TRIAL
  MONTHLY
  QUARTERLY
  HALF_YEARLY
  ANNUALLY
}

enum ArticleStatus {
  DRAFT
  UNDER_REVIEW
  APPROVED
  PUBLISHED
  REJECTED
}

enum ContentType {
  HTML
  MARKDOWN
}